// Example : 367 = 3+6+7 =16 = 1+6 = 7


Iterative Approach.

Time Complexity - O(log N)
import java.util.*;
class Solution {
    public int addDigits(int n)
    {
      
    while (n >= 10) {
        int sum = 0;
        while (n > 0) {
            sum += n % 10;
            n /= 10;
        }
        n = sum;
    }
    return n;
}
    public static void main(String[] args) {
        Solution obj= new Solution();
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter a number : ");
        int n=sc.nextInt();
        System.out.println("Add digits : " + obj.addDigits(n));
        
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
String Conversion Approach.

Time Complexity - O(log N)

import java.util.*;
class Solution {
    public int addDigits(int n)
    {
    while (n >= 10) {
        int sum = 0;
        for (char c : String.valueOf(n).toCharArray()) {
            sum += c - '0';
        }
        n = sum;
    }
    return n;

}
    public static void main(String[] args) {
        Solution obj= new Solution();
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter a number : ");
        int n=sc.nextInt();
        System.out.println("Add digits : " + obj.addDigits(n));
        
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Mathematical Approach.

Time Complexity - O(1) 

import java.util.*;
class Solution {
    public int addDigits(int n)
    {
      return 1+ (n-1)%9;  
    }
    public static void main(String[] args) {
        Solution obj= new Solution();
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter a number : ");
        int n=sc.nextInt();
        System.out.println("Add digits : " + obj.addDigits(n));
        
    }
}


